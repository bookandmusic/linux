#cloud-config
package_update: false
package_upgrade: false

runcmd:
  # 修改系统镜像
  - sed -i 's@//.*archive.ubuntu.com@//mirrors.aliyun.com@g' /etc/apt/sources.list
  - sed -i 's@//.*archive.ubuntu.com@//mirrors.aliyun.com@g' /etc/apt/sources.list.d/ubuntu.sources

  - apt-get update && apt-get install -y curl wget apt-transport-https ca-certificates software-properties-common

  # 导入 docker-ce 镜像地址
  - curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add -
  - echo "\n" | add-apt-repository "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"
  
  # 导入kubernets镜像地址
  - curl -fsSL https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.29/deb/Release.key |
        gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  - echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.29/deb/ /" |
        tee /etc/apt/sources.list.d/kubernetes.list

  # 更新镜像
  - apt-get update

  # 加载必要的内核模块并配置系统参数
  - |
    cat <<EOF | tee /etc/modules-load.d/containerd.conf
    overlay
    br_netfilter
    EOF
  - modprobe overlay
  - modprobe br_netfilter
  - |
    cat <<EOF | tee /etc/sysctl.d/99-kubernetes-cri.conf
    net.bridge.bridge-nf-call-iptables  = 1
    net.ipv4.ip_forward                 = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    EOF
  - sysctl --system

  # 安装 Docker、Containerd、Podman 及相关工具
  - apt-get install -y containerd.io docker-ce docker-buildx-plugin docker-compose-plugin podman podman-compose
  - systemctl enable --now containerd docker podman

  # 配置 Docker 使用镜像加速器
  - mkdir /etc/docker
  - |
    cat > /etc/docker/daemon.json << EOF
    {
      "registry-mirrors": [
        "https://dockerproxy.cn"
      ]
    }
    EOF
  - systemctl restart docker

  # 配置 containerd 并使用阿里云镜像
  - mkdir -p /etc/containerd
  - containerd config default > /etc/containerd/config.toml
  - sed -i 's#sandbox_image = "registry.k8s.io/pause:[^"]*"#sandbox_image = "registry.aliyuncs.com/google_containers/pause:3.9"#' /etc/containerd/config.toml
  - sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
  - sed -i '/\[plugins\."io.containerd.grpc.v1.cri"\.registry\]/,/config_path/s#config_path = ""#config_path = "/etc/containerd/certs.d"#' /etc/containerd/config.toml
  - mkdir /etc/containerd/certs.d/docker.io -pv
  - |
    cat > /etc/containerd/certs.d/docker.io/hosts.toml << EOF
    server = "https://docker.io"
    [host."https://dockerproxy.cn"]
      capabilities = ["pull", "resolve"]
    EOF
  - systemctl restart containerd

  # 安装 cri-tools、cni-plugins 和 Kubernetes 相关工具
  - apt-get install -y cri-tools kubernetes-cni kubelet kubeadm kubectl && apt-mark hold kubelet kubeadm kubectl
  - |
    cat <<EOF | tee /etc/crictl.yaml
    runtime-endpoint: unix:///run/containerd/containerd.sock
    EOF
  - rm -f /etc/cni/net.d/*.conf*
  - systemctl enable --now kubelet

  # 拉取 Kubernetes 镜像
  - kubeadm config images pull --cri-socket=unix:///run/containerd/containerd.sock --image-repository=registry.aliyuncs.com/google_containers --kubernetes-version=1.29.7

  # 初始化 Kubernetes 集群
  - |
    cat > kubeadm-config.yaml <<EOF 
    kind: InitConfiguration
    apiVersion: kubeadm.k8s.io/v1beta3
    nodeRegistration:
      criSocket: unix:///run/containerd/containerd.sock
    ---
    kind: ClusterConfiguration
    apiVersion: kubeadm.k8s.io/v1beta3
    imageRepository: registry.aliyuncs.com/google_containers
    kubernetesVersion: 1.29.7
    apiServer:
      certSANs: # --apiserver-cert-extra-sans
      - "127.0.0.1"
    networking:
      podSubnet: "10.244.0.0/16" # --pod-network-cidr
    ---
    kind: KubeletConfiguration
    apiVersion: kubelet.config.k8s.io/v1beta1
    cgroupDriver: systemd
    EOF
  - kubeadm init --config kubeadm-config.yaml

  # 安装 Flannel 网络插件
  - kubectl apply -f https://mirror.ghproxy.com/https://raw.githubusercontent.com/flannel-io/flannel/v0.25.5/Documentation/kustomization/kube-flannel/kube-flannel.yml

  # 取消控制节点的隔离
  - kubectl taint nodes --all node-role.kubernetes.io/control-plane-

  # 配置 kubectl
  - export KUBECONFIG=/etc/kubernetes/admin.conf
  - mkdir -p ${HOME:-/root}/.kube && cp -f $KUBECONFIG ${HOME:-/root}/.kube/config
